var width = document.documentElement.scrollWidth, height = 768;  //  960 500
// maybe take width of header each time it changes idk

// Setting color domains(intervals of values) for our map

var color_domain = [50, 150, 350, 750, 1500]
var ext_color_domain = [0, 50, 150, 350, 750, 1500]
var legend_labels = ["< 50", "50+", "150+", "350+", "750+", "> 1500"]              
var paint = d3.scale.threshold()
.domain(color_domain)
.range(["#7FFF7F", "#92E55B", "#AFCC3D", "#B29523", "#99460F", "#7F0000"]);

var div = d3.select("body").append("div")   
.attr("class", "tooltip")               
.style("opacity", 0);

var svg = d3.select("body").append("svg")
.attr("width", width)
.attr("height", height)
.style("margin", "10px auto");

var projection = d3.geo.albers()
.rotate([-105, 0])
.center([-10, 65])
.parallels([52, 64])
.scale(900)
.translate([width / 2, height / 2]);

var path = d3.geo.path().projection(projection);

//Reading map file and data

//queue()
//.defer(d3.json, "map.json")
//.defer(d3.csv, "accidents.csv")
//.await(ready);

//queue()
//.defer(d3.json, "map.json")
//.defer(d3.csv, data_from_django)
//.await(draw_values);



function draw_values(map, data) {
	//  Getting values from json
	var region_values = {};  //  Ассоциативный массив: ключ - регион, значение - кол-во дтп
	
	console.log(map)
	console.log(data)
	
	for (var key in data) {
		console.log(data[key]);
		region_values[key] = +data[key];
	}
	//
	//data.forEach(function(d) {
	//	region_values[d.RegionCode] = +d.Deaths;
	//});//
	
	//  Drawing Russia with colors
	
	svg.append("g")
	.attr("class", "region")
	.selectAll("path")
	.data(topojson.object(map, map.objects.russia).geometries)
	.enter().append("path")
	.attr("d", path)
	.style("fill", function(d) {
		return paint(region_values[d.properties.region]); 
	})
	.style("opacity", 0.8)
};



//Start of Choropleth drawing

function ready(error, map, data) {
  var rateById = {};
  var nameById = {};

  data.forEach(function(d) {
    rateById[d.RegionCode] = +d.Deaths;
    nameById[d.RegionCode] = d.RegionName;
});

//Drawing Choropleth

svg.append("g")
.attr("class", "region")
.selectAll("path")
.data(topojson.object(map, map.objects.russia).geometries)
.enter().append("path")
.attr("d", path)
.style("fill", function(d) {
  return paint(rateById[d.properties.region]); 
})
.style("opacity", 0.8)


//Adding mouseevents
.on("mouseover", function(d) {
  d3.select(this).transition().duration(300).style("opacity", 1);
  div.transition().duration(300)
  .style("opacity", 1)
  div.text(nameById[d.properties.region] + " : " + rateById[d.properties.region])
  .style("left", (d3.event.pageX) + "px")
  .style("top", (d3.event.pageY -30) + "px");
})
.on("mouseout", function() {
  d3.select(this)
  .transition().duration(300)
  .style("opacity", 0.8);
  div.transition().duration(300)
  .style("opacity", 0);
})

   

// Adding cities on the map
/*
d3.tsv("cities.tsv", function(error, data) {
  var city = svg.selectAll("g.city")
  .data(data)
  .enter()
  .append("g")
  .attr("class", "city")
  .attr("transform", function(d) { return "translate(" + projection([d.lon, d.lat]) + ")"; });

  city.append("circle")
  .attr("r", 3)
  .style("fill", "lime")
  .style("opacity", 0.75);

  city.append("text")
  .attr("x", 5)
  .text(function(d) { return d.City; });
});
*/

}; // <-- End of Choropleth drawing
 


//Adding legend for our Choropleth

var legend = svg.selectAll("g.legend")
.data(ext_color_domain)
.enter().append("g")
.attr("class", "legend");

var ls_w = 20, ls_h = 20;

legend.append("rect")
.attr("x", 20)
.attr("y", function(d, i) { return height - (i * ls_h) - 2 * ls_h; } )
.attr("width", ls_w)
.attr("height", ls_h)
.style("fill", function(d, i) { return paint(d); })
.style("opacity", 0.8);

legend.append("text")
.attr("x", 50)
.attr("y", function(d, i) { return height - (i * ls_h) - ls_h - 4; } )
.text(function(d, i) { return legend_labels[i]; } );

console.log(1);